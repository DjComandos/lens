using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;
using Lens.SyntaxTree.SyntaxTree;
using Lens.SyntaxTree.SyntaxTree.ControlFlow;
using Lens.SyntaxTree.Utils;

namespace Lens.SyntaxTree.Compiler
{
	/// <summary>
	/// The main context class that stores information about currently compiled Assembly.
	/// </summary>
	public partial class Context
	{
		private Context()
		{
			var an = new AssemblyName(getAssemblyName());
			MainAssembly = AppDomain.CurrentDomain.DefineDynamicAssembly(an, AssemblyBuilderAccess.RunAndSave);
			MainModule = MainAssembly.DefineDynamicModule(an.Name, an.Name + ".dll");
			MainType = MainModule.DefineType("_ScriptRootType", TypeAttributes.Public | TypeAttributes.Class);
			EntryPoint = MainType.DefineMethod("_ScriptBody", MethodAttributes.Static | MethodAttributes.Public, typeof(object), Type.EmptyTypes);

			_TypeResolver = new TypeResolver();
			_DefinedFunctions = new List<FunctionNode>();
			_DefinedRecords = new List<RecordDefinitionNode>();
			_DefinedTypes = new List<TypeDefinitionNode>();
			_MainFunction = new FunctionNode {Name = "_ScriptBody"};
		}

		/// <summary>
		/// Creates the context from a stream of nodes.
		/// </summary>
		/// <param name="nodes">Stream of nodes generated by the parser.</param>
		public static Context CreateFromNodes(IEnumerable<NodeBase> nodes)
		{
			var ctx = new Context();
			foreach (var currNode in nodes)
			{
				if (currNode is TypeDefinitionNode)
					ctx._DefinedTypes.Add(currNode as TypeDefinitionNode);
				else if (currNode is RecordDefinitionNode)
					ctx._DefinedRecords.Add(currNode as RecordDefinitionNode);
				else if (currNode is FunctionNode)
					ctx._DefinedFunctions.Add(currNode as FunctionNode);
				else if(currNode is UsingNode)
					ctx._TypeResolver.AddNamespace((currNode as UsingNode).Namespace);
				else
					ctx._MainFunction.Body.Add(currNode);
			}

			ctx.prepare();
			return ctx;
		}

		#region Properties

		/// <summary>
		/// The assembly that's being currently built.
		/// </summary>
		public AssemblyBuilder MainAssembly { get; private set; }

		/// <summary>
		/// The main module of the current assembly.
		/// </summary>
		public ModuleBuilder MainModule { get; private set; }

		/// <summary>
		/// The main type of the module.
		/// </summary>
		public TypeBuilder MainType { get; private set; }

		/// <summary>
		/// The entry point of the assembly.
		/// </summary>
		public MethodBuilder EntryPoint { get; private set; }

		#endregion

		#region Fields

		/// <summary>
		/// The counter that allows multiple assemblies.
		/// </summary>
		private static int _AssemblyId;

		/// <summary>
		/// The counter for closure types.
		/// </summary>
		private int _ClosureId;

		/// <summary>
		/// A helper that resolves built-in .NET types by their string signatures.
		/// </summary>
		private readonly TypeResolver _TypeResolver;

		/// <summary>
		/// The defined records.
		/// </summary>
		private List<RecordDefinitionNode> _DefinedRecords;

		/// <summary>
		/// The defined types.
		/// </summary>
		private List<TypeDefinitionNode> _DefinedTypes;

		/// <summary>
		/// The defined functions.
		/// </summary>
		private List<FunctionNode> _DefinedFunctions;

		/// <summary>
		/// The main function body.
		/// </summary>
		private FunctionNode _MainFunction;

		#endregion
	}
}
