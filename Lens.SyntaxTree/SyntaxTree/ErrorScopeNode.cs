using System;
using System.Collections.Generic;
using Lens.SyntaxTree.Compiler;

namespace Lens.SyntaxTree.SyntaxTree
{
	/// <summary>
	/// A node that handles error reporting for code generated by Expr.
	/// </summary>
	public class ErrorScopeNode : NodeBase
	{
		public NodeBase Expression { get; set; }
		public LocationEntity Location { get; set; }

		protected override Type resolveExpressionType(Context ctx, bool mustReturn = true)
		{
			return Expression.GetExpressionType(ctx, mustReturn);
		}

		public override IEnumerable<NodeBase> GetChildNodes()
		{
			yield return Expression;
		}

		public override void Compile(Context ctx, bool mustReturn)
		{
			try
			{
				Expression.Compile(ctx, mustReturn);
			}
			catch (LensCompilerException ex)
			{
				if(ex.EndLocation.IsEmpty || ex.StartLocation.IsEmpty)
					ex.BindToLocation(Location);

				throw;
			}
		}
	}
}
