using System;
using System.Collections.Generic;
using Lens.SyntaxTree;
using Lens.SyntaxTree.ControlFlow;
using Lens.Utils;

namespace Lens.Compiler
{
	internal partial class TypeEntity
	{
		#region Type contents

		public void CreateTypeMembers(IEnumerable<TypeLabel> labels)
		{
			foreach (var curr in labels)
			{
				var tagName = curr.Name;
				var labelType = Context.CreateType(tagName, TypeInfo, isSealed: true, prepare: true, defaultCtor: false);
				labelType.Kind = TypeEntityKind.TypeLabel;

				var ctor = labelType.CreateConstructor();
				if (curr.IsTagged)
				{
					labelType.CreateField("Tag", curr.TagType);

					var args = new HashList<FunctionArgument> { { "value", new FunctionArgument("value", curr.TagType) } };

					var staticCtor = Context.MainType.CreateMethod(tagName, tagName, new string[0], true);
					ctor.Arguments = staticCtor.Arguments = args;

					ctor.Body.Add(
						Expr.SetMember(Expr.This(), "Tag", Expr.Get("value"))
					);

					staticCtor.Body.Add(
						Expr.New(tagName, Expr.Get("value"))
					);
				}
				else
				{
					var staticCtor = labelType.CreateMethod(tagName, tagName, new string[0], true);
					staticCtor.Body.Add(Expr.New(tagName));

					Context.RegisterProperty(tagName, labelType.TypeInfo, staticCtor);
				}
			}
		}

		#endregion

		#region Record contents

		public void CreateRecordMembers(IEnumerable<RecordField> fields)
		{
			var recCtor = CreateConstructor();

			foreach (var curr in fields)
			{
				var field = CreateField(curr.Name, curr.Type);
				var argName = "_" + field.Name.ToLowerInvariant();

				recCtor.Arguments.Add(argName, new FunctionArgument(argName, curr.Type));
				recCtor.Body.Add(
					Expr.SetMember(Expr.This(), field.Name, Expr.Get(argName))
				);
			}
		}

		#endregion

		#region Equality members

		private void createSpecificEquals()
		{
			var eq = CreateMethod("Equals", "bool", new[] { Expr.Arg("other", Name) });
			eq.Kind = MethodEntityKind.AutoGenerated;

			// var result = true
			eq.Body.Add(Expr.Var("result", Expr.True()));

			foreach (var f in _Fields.Values)
			{
				var left = Expr.GetMember(Expr.This(), f.Name);
				var right = Expr.GetMember(Expr.Get("other"), f.Name);

				var ftype = f.Type ?? Context.ResolveType(f.TypeSignature);

				var isSeq = ftype.IsGenericType && ftype.Implements(typeof(IEnumerable<>), true);
				var expr = isSeq
					? Expr.Invoke("Enumerable", "SequenceEqual", left, right)
					: Expr.Invoke(Expr.This(), "Equals", Expr.Cast(left, "object"), Expr.Cast(right, "object"));

				eq.Body.Add(
					Expr.Set(
						"result",
						Expr.And(Expr.Get("result"), expr)
					)
				);
			}

			eq.Body.Add(Expr.Get("result"));
		}

		private void createGenericEquals()
		{
			var eq = CreateMethod(
				"Equals",
				"bool",
				new[] { Expr.Arg<object>("obj") },
				false,
				true
			);

			eq.Kind = MethodEntityKind.AutoGenerated;

			// if(this.ReferenceEquals null obj)
			//    false
			// else
			//    (this.ReferenceEquals this obj) || ( (obj.GetType () == this.GetType()) && (this.Equals obj as <Name>))

			eq.Body.Add(
				Expr.If(
					Expr.Invoke(Expr.This(), "ReferenceEquals", Expr.Null(), Expr.Get("obj")),
					Expr.Block(Expr.False()),
					Expr.Block(
						Expr.Or(
							Expr.Invoke(Expr.This(), "ReferenceEquals", Expr.This(), Expr.Get("obj")),
							Expr.And(
								Expr.Equal(
									Expr.Invoke(Expr.Get("obj"), "GetType"),
									Expr.Invoke(Expr.This(), "GetType")
								),
								Expr.Invoke(
									Expr.This(),
									"Equals",
									Expr.Cast(Expr.Get("obj"), Name)
								)
							)
						)
					)
				)
			);
		}

		private void createGetHashCode()
		{
			var ghc = CreateMethod(
				"GetHashCode",
				typeof(int),
				Type.EmptyTypes,
				false,
				true
			);

			ghc.Kind = MethodEntityKind.AutoGenerated;

			// var result = 0
			ghc.Body.Add(Expr.Var("result", Expr.Int(0)));

			// result ^= (<field> != null ? field.GetHashCode() : 0) * 397
			var id = 0;
			foreach (var f in _Fields.Values)
			{
				var ftype = f.Type ?? Context.ResolveType(f.TypeSignature);

				NodeBase expr;
				if (ftype.IsIntegerType())
					expr = Expr.GetMember(Expr.This(), f.Name);
				else if (ftype.IsValueType)
					expr = Expr.Invoke(
						Expr.Cast(Expr.GetMember(Expr.This(), f.Name), typeof(object)),
						"GetHashCode"
					);
				else
					expr = Expr.If(
						Expr.NotEqual(
							Expr.GetMember(Expr.This(), f.Name),
							Expr.Null()
						),
						Expr.Block(
							Expr.Invoke(
								Expr.GetMember(Expr.This(), f.Name),
								"GetHashCode"
							)
						),
						Expr.Block(Expr.Int(0))
					);

				if (id < _Fields.Count - 1)
					expr = Expr.Mult(expr, Expr.Int(397));

				ghc.Body.Add(
					Expr.Set("result", Expr.Xor(Expr.Get("result"), expr))
				);

				id++;
			}

			ghc.Body.Add(Expr.Get("result"));
		}

		#endregion
	}
}
